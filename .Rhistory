a <- c(3,3,3,2,3,3,2,2)
a <- c
View(a)
a <- c(3,3,3,2,3,3,2,2)
b <- c
for (i in 4:length(c)){
if (b[i] - b[i-1] < 0){
b[i] <- mode(c(b[i-1], b[i-2], b[i-3]))
} else {
}
}
b <- a
for (i in 4:length(c)){
if (b[i] - b[i-1] < 0){
b[i] <- mode(c(b[i-1], b[i-2], b[i-3]))
} else {
}
}
if (b[i] < b[i-1] ){
b[i] <- mode(c(b[i-1], b[i-2], b[i-3]))
} else {
}
b <- a
for (i in 4:length(c)){
if (b[i] < b[i-1] ){
b[i] <- mode(c(b[i-1], b[i-2], b[i-3]))
} else {
}
}
?if
b <- a
for (i in 4:length(c)) {
if (b[i] < b[i-1]) {
b[i] <- median(c(b[i-1], b[i-2], b[i-3]))
} else {
# Add any actions for the 'else' condition if needed
}
}
b <- a
for (i in 4:length(a)) {
if (b[i] < b[i-1]) {
b[i] <- median(c(b[i-1], b[i-2], b[i-3]))
} else {
# Add any actions for the 'else' condition if needed
}
}
b <- a
for (i in 4:length(a)) {
if (b[i] < b[i-1]) {
b[i] <- mode(c(b[i-1], b[i-2], b[i-3]))
} else {
# Add any actions for the 'else' condition if needed
}
}
?mode
b <- a
mode(c(2,2,3,2))
mode(2,2,3,2)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
b[i] <- Mode(c(b[i-1], b[i-2], b[i-3]))
b <- a
b <- a
for (i in 4:length(a)) {
if (b[i] < b[i-1]) {
b[i] <- Mode(c(b[i-1], b[i-2], b[i-3]))
} else {
# Add any actions for the 'else' condition if needed
}
}
rep(1:10, 2)
?rep
id <- rep(1:3, time = 2, each =4)
id
n_id <- 2000
period <- 2017 - 1986
id <- rep(1:n_id, time = 1, each =period)
years <- rep(1986:2017, n_id)
n_id <- 2000
period <- 2017 - 1986 + 1
id <- rep(1:n_id, time = 1, each =period)
years <- rep(1986:2017, n_id)
data <- matrix(id, years)
data <- as.data.frame(id = id, year = years)
data <- data.frame(id = id, year = years)
data[, "id"]
rep(2, 10)
edu_test < c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 11))
edu_test <- c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 11))
edu_test <- c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 13))
edu_test <- c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 15))
data <- data.frame(id = id, year = years, educ =  rep(edu_test, 2000))
edu_test <- c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 16))
data <- data.frame(id = id, year = years, educ =  rep(edu_test, 2000))
View(data)
data_n <- data %>%
arrange(id, year) unique(data[, "id"])
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
library(todyverse)
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
library(tidyverse)
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
View(data_n)
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
View(data_n)
data_n <- data_n %>%
group_by(id)  %>%
mutate(edu_change = educ - lag(educ, default = first(educ)))
View(data_n)
?mode
?mode
?Mode
?lag
data_n <- data_n %>%
data_n <- data_n %>%
group_by(id)  %>%
mutate(edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(lag(educ, k = 1),
lag(educ, k = 2),
lag(educ, k = 3)))
data_n <- data_n %>%
data_n <- data_n %>%
group_by(id) %>%
mutate(
edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(c(lag(educ, 1, default = NA),
lag(educ, 2, default = NA),
lag(educ, 3, default = NA))))
View(data_n)
data_n <- data_n %>%
group_by(id) %>%
mutate(
edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(c(lag(educ, 1, default = first(educ)),
lag(educ, 2, default = first(educ)),
lag(educ, 3, default = first(educ))))
)
View(data_n)
# Assuming data_n is a data frame and edu_change and educ are columns within it.
for (i in unique(data_n$id)){
for (j in unique(data_n$count_n[data_n$id == i])){
if (j >= 4){
# Find the specific row index for combination of i and j
idx <- which(data_n$id == i & data_n$count_n == j)
if (!is.na(idx) && data_n$edu_change[idx] < 0){
# Calculate mode of the last three values
# Ensure indexes do not go out of bounds
idxs_to_use <- idx - 1:3
idxs_to_use <- idxs_to_use[idxs_to_use > 0 & data_n$id[idxs_to_use] == i] # Keep within the same id
if (length(idxs_to_use) >= 3) {
mode_last_3 <- DescTools::Mode(data_n$educ[idxs_to_use])
# Assign mode to the educ column at current index
data_n$educ[idx] <- mode_last_3
data_n$edu_change[idx] <- data_n$edu_change[idx] - data_n$edu_change[idx-1]
}
}
}
}
}
View(data_n)
n_id <- 2000
period <- 2017 - 1986 + 1
id <- rep(1:n_id, time = 1, each =period)
years <- rep(1986:2017, n_id)
edu_test <- c(rep(2, 10), 1 ,2,1,2,1,1, rep(2, 16))
data <- data.frame(id = id, year = years, educ =  rep(edu_test, 2000))
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
data_n <- data_n %>%
group_by(id) %>%
mutate(
edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(c(lag(educ, 1, default = first(educ)),
lag(educ, 2, default = first(educ)),
lag(educ, 3, default = first(educ))))
)
head(data_n, 55)
head(data_n, 55)
?head
head(data_n, n =55)
print(n =55)
print( head(data_n, 55), n = 55)
data_n <- data_n %>%
group_by(id) %>%
arrange(id, year) %>%  # Ensuring data is ordered within each ID by year
mutate(
mode_last_3 = ifelse(row_number() >= 4,
DescTools::Mode(c(lag(educ, 1), lag(educ, 2), lag(educ, 3))),
educ),  # Default mode to current educ if fewer than 3 previous points
# Updating educ if edu_change is negative
educ = ifelse(edu_change < 0, mode_last_3, educ),
# Recalculate edu_change after potentially updating educ
edu_change = educ - lag(educ, default = first(educ))  # Using first(educ) for the first element
) %>%
ungroup()  # Remove grouping
library(DescTools)  # For the Mode function
# Pre-sort data to ensure order is correct for processing
data_n <- data_n[order(data_n$id, data_n$year), ]
# Loop over each unique ID
for (i in unique(data_n$id)) {
# Extract the subset of data for the current ID
subset_data <- data_n[data_n$id == i,]
# Iterate over each row in the subset starting from the 4th entry
for (j in 4:nrow(subset_data)) {
# Calculate mode of the last three educ values
mode_last_3 <- DescTools::Mode(subset_data$educ[(j-3):(j-1)])
# If edu_change is negative, update educ and recalculate edu_change
if (subset_data$edu_change[j] < 0) {
subset_data$educ[j] <- mode_last_3
if (j < nrow(subset_data)) {  # Check to ensure we're not on the last row
subset_data$edu_change[j + 1] <- subset_data$educ[j + 1] - subset_data$educ[j]
}
}
}
# Place the updated subset back into the main data frame
data_n[data_n$id == i,] <- subset_data
}
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
data_n <- data_n %>%
group_by(id) %>%
mutate(
edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(c(lag(educ, 1, default = first(educ)),
lag(educ, 2, default = first(educ)),
lag(educ, 3, default = first(educ))))
)
# Assuming data_n is a data frame and edu_change and educ are columns within it.
library(DescTools)  # For the Mode function
# Pre-sort data to ensure order is correct for processing
data_n <- data_n[order(data_n$id, data_n$year), ]
# Loop over each unique ID
for (i in unique(data_n$id)) {
# Extract the subset of data for the current ID
subset_data <- data_n[data_n$id == i,]
# Iterate over each row in the subset starting from the 4th entry
for (j in 4:nrow(subset_data)) {
# Calculate mode of the last three educ values
mode_last_3 <- DescTools::Mode(subset_data$educ[(j-3):(j-1)])
# If edu_change is negative, update educ and recalculate edu_change
if (subset_data$edu_change[j] < 0) {
subset_data$educ[j] <- mode_last_3
if (j < nrow(subset_data)) {  # Check to ensure we're not on the last row
subset_data$edu_change[j + 1] <- subset_data$educ[j + 1] - subset_data$educ[j]
}
}
}
# Place the updated subset back into the main data frame
data_n[data_n$id == i,] <- subset_data
}
View(data_n)
unique(data_n$educ)
edu_test <- c(rep(4, 10), 1 ,2,1,2,1,1, rep(2, 16))
data <- data.frame(id = id, year = years, educ =  rep(edu_test, 2000))
data_n <- data %>%
arrange(id, year) %>%
group_by(id) %>%
mutate(count_n = row_number())
data_n <- data_n %>%
group_by(id) %>%
mutate(
edu_change = educ - lag(educ, default = first(educ)),
mode_last_3 = DescTools::Mode(c(lag(educ, 1, default = first(educ)),
lag(educ, 2, default = first(educ)),
lag(educ, 3, default = first(educ))))
)
# Assuming data_n is a data frame and edu_change and educ are columns within it.
library(DescTools)  # For the Mode function
# Pre-sort data to ensure order is correct for processing
data_n <- data_n[order(data_n$id, data_n$year), ]
# Loop over each unique ID
for (i in unique(data_n$id)) {
# Extract the subset of data for the current ID
subset_data <- data_n[data_n$id == i,]
# Iterate over each row in the subset starting from the 4th entry
for (j in 4:nrow(subset_data)) {
# Calculate mode of the last three educ values
mode_last_3 <- DescTools::Mode(subset_data$educ[(j-3):(j-1)])
# If edu_change is negative, update educ and recalculate edu_change
if (subset_data$edu_change[j] < 0) {
subset_data$educ[j] <- mode_last_3
if (j < nrow(subset_data)) {  # Check to ensure we're not on the last row
subset_data$edu_change[j + 1] <- subset_data$educ[j + 1] - subset_data$educ[j]
}
}
}
# Place the updated subset back into the main data frame
data_n[data_n$id == i,] <- subset_data
}
